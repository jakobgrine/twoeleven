{"mappings":"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","sources":["node_modules/@swc/helpers/src/_define_property.mjs","src/board.ts","src/index.ts"],"sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n","interface Coordinate {\n  x: number;\n  y: number;\n}\n\nexport enum Direction {\n  Left,\n  Up,\n  Right,\n  Down,\n}\n\nexport class Board {\n  board: Array<number>;\n  size = 4;\n  gameOver = false;\n  score = 0;\n  highscore = 0;\n\n  constructor(size: number) {\n    this.size = size;\n\n    // TODO load from localStorage\n    this.reset();\n  }\n\n  reset() {\n    this.score = 0;\n    this.gameOver = false;\n    this.board = new Array(this.size * this.size).fill(0);\n    this.spawnRandomTile();\n    this.spawnRandomTile();\n    this.save();\n  }\n\n  save() {\n    // TODO save to localStorage\n    // localStorage.setItem(\"\", this.size);\n  }\n\n  apply() {\n    const element = document.getElementById(\"board-foreground\");\n    let html = \"\";\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        const here = { x: col, y: row };\n        if (this.has(here)) {\n          const value = this.get(here);\n          html += `<div class=\"tile tile-${value}\" style=\"--y: ${row}; --x: ${col};\"></div>`;\n        }\n      }\n    }\n    element!.innerHTML = html;\n  }\n\n  action(direction: Direction): boolean {\n    switch (direction) {\n      case Direction.Left:\n        return this.left();\n      case Direction.Up:\n        return this.up();\n      case Direction.Right:\n        return this.right();\n      case Direction.Down:\n        return this.down();\n    }\n  }\n\n  left(): boolean {\n    const scoreDelta = this.merge();\n    const moved = this.move();\n    this.score += scoreDelta;\n    if (scoreDelta > 0 || moved) {\n      if (this.score > this.highscore) {\n        this.highscore = this.score;\n      }\n\n      this.spawnRandomTile();\n\n      if (this.isGameOver()) {\n        this.gameOver = true;\n      }\n\n      return true;\n    }\n    return false;\n  }\n\n  up(): boolean {\n    this.transpose();\n    const changed = this.left();\n    this.transpose();\n    return changed;\n  }\n\n  right(): boolean {\n    this.transpose();\n    this.reflect();\n    this.transpose();\n    const changed = this.left();\n    this.transpose();\n    this.reflect();\n    this.transpose();\n    return changed;\n  }\n\n  down(): boolean {\n    this.reflect();\n    this.transpose();\n    const changed = this.left();\n    this.transpose();\n    this.reflect();\n    return changed;\n  }\n\n  isGameOver(): boolean {\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        // Check for empty fields\n        const here = { x: col, y: row };\n        if (!this.has(here)) {\n          return false;\n        }\n\n        // Check for mergeable tiles\n        const right = { x: col + 1, y: row };\n        if (this.get(here) == this.get(right)) {\n          return false;\n        }\n        const bottom = { x: col, y: row + 1 };\n        if (this.get(here) == this.get(bottom)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  spawnRandomTile() {\n    // Get empty fields\n    const free = new Array<Coordinate>();\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        const here = { x: col, y: row };\n        if (!this.has(here)) {\n          free.push(here);\n        }\n      }\n    }\n\n    // Pick a random field\n    const index = Math.floor(Math.random() * free.length);\n    // 10% chance of getting a 4, else a 2\n    const value = Math.random() > 0.9 ? 4 : 2;\n    this.set(free[index], value);\n  }\n\n  transpose() {\n    const newBoard = new Array<number>(this.size * this.size).fill(0);\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        // Swap x and y\n        const value = this.get({ x: col, y: row });\n        newBoard[row + col * this.size] = value;\n      }\n    }\n    this.board = newBoard;\n  }\n\n  reflect() {\n    const newBoard = new Array<number>(this.size * this.size).fill(0);\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        // Reflect along x-axis\n        const value = this.get({ x: col, y: row });\n        newBoard[col + (this.size - row - 1) * this.size] = value;\n      }\n    }\n    this.board = newBoard;\n  }\n\n  merge(): number {\n    let scoreDelta = 0;\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        // Look for a non-empty field\n        const left = { x: col, y: row };\n        if (!this.has(left)) {\n          continue;\n        }\n\n        for (let i = col + 1; i < this.size; i++) {\n          // Look for a field with the same value\n          const right = { x: i, y: row };\n          if (!this.has(right)) {\n            continue;\n          }\n\n          if (this.get(left) == this.get(right)) {\n            // Merge the two values\n            const value = this.get(left)!;\n            this.set(left, value * 2);\n            this.delete(right);\n            scoreDelta += value * 2;\n          }\n          break;\n        }\n      }\n    }\n    return scoreDelta;\n  }\n\n  move(): boolean {\n    let changed = false;\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        // Look for an empty field\n        const left = { x: col, y: row };\n        if (this.has(left)) {\n          continue;\n        }\n\n        for (let i = col + 1; i < this.size; i++) {\n          // Look for a non-empty field\n          const right = { x: i, y: row };\n          if (!this.has(right)) {\n            continue;\n          }\n\n          // Move the non-empty field to the left\n          this.set(left, this.get(right)!);\n          this.delete(right);\n          changed = true;\n          break;\n        }\n      }\n    }\n    return changed;\n  }\n\n  get(coordinate: Coordinate) {\n    return this.board[coordinate.x + coordinate.y * this.size];\n  }\n\n  set(coordinate: Coordinate, value: number) {\n    this.board[coordinate.x + coordinate.y * this.size] = value;\n  }\n\n  has(coordinate: Coordinate) {\n    return this.get(coordinate) > 0;\n  }\n\n  delete(coordinate: Coordinate) {\n    this.set(coordinate, 0);\n  }\n\n  print() {\n    let str = \"\";\n    for (let row = 0; row < this.size; row++) {\n      str += this.board.slice(row * this.size, (row + 1) * this.size).join(\" \");\n      str += \"\\n\";\n    }\n    console.log(str);\n    console.log(this.board);\n  }\n}\n","import { Board, Direction } from \"./board\";\n\nfunction main() {\n  const board = new Board(4);\n\n  window.addEventListener(\"keydown\", (event) => {\n    switch (event.code) {\n      case \"ArrowLeft\":\n      case \"ArrowUp\":\n      case \"ArrowRight\":\n      case \"ArrowDown\":\n        const direction = Direction[event.code.replace(\"Arrow\", \"\")];\n        const changed = board.action(direction);\n        if (changed) {\n          board.apply();\n        }\n        break;\n    }\n  });\n}\n\nwindow.addEventListener(\"load\", main);\n"],"names":["$bb9a5d09fff8458d$export$2e2bcd8739ae039","obj","key","value","Object","defineProperty","enumerable","configurable","writable","$4ecd03f319e421c5$export$cacd6541cfeeb6c1","Direction","$4ecd03f319e421c5$export$dc537a3a3893548e","reset","this","score","gameOver","board","Array","size","fill","spawnRandomTile","save","apply","element","document","getElementById","html","row","col","here","x","y","has","get","innerHTML","action","direction","Left","left","Up","up","Right","right","Down","down","scoreDelta","merge","moved","move","highscore","isGameOver","transpose","changed","reflect","bottom","free","push","index","Math","floor","random","length","set","newBoard","i","delete","coordinate","print","str","slice","join","console","log","constructor","window","addEventListener","event","code","replace"],"version":3,"file":"index.3204183d.js.map"}